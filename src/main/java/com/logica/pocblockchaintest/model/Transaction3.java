package com.logica.pocblockchaintest.model;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.1.
 */
public class Transaction3 extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50611c57806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063913c484011610078578063913c4840146104e4578063bd5981ae1461069a578063de0697d114610740578063df88e91d146107e6576100a5565b806325d77024146100aa57806327b91a12146101cf5780633a51d24614610300578063518bddd9146103b8575b600080fd5b610150600480360360208110156100c057600080fd5b8101906020810181356401000000008111156100db57600080fd5b8201836020820111156100ed57600080fd5b8035906020019184600183028401116401000000008311171561010f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061088c945050505050565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561019357818101518382015260200161017b565b50505050905090810190601f1680156101c05780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6102fe600480360360608110156101e557600080fd5b81019060208101813564010000000081111561020057600080fd5b82018360208201111561021257600080fd5b8035906020019184600183028401116401000000008311171561023457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561028757600080fd5b82018360208201111561029957600080fd5b803590602001918460018302840111640100000000831117156102bb57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250610a5e915050565b005b6103a66004803603602081101561031657600080fd5b81019060208101813564010000000081111561033157600080fd5b82018360208201111561034357600080fd5b8035906020019184600183028401116401000000008311171561036557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c7b945050505050565b60408051918252519081900360200190f35b61045e600480360360208110156103ce57600080fd5b8101906020810181356401000000008111156103e957600080fd5b8201836020820111156103fb57600080fd5b8035906020019184600183028401116401000000008311171561041d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610e4e945050505050565b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156104a757818101518382015260200161048f565b50505050905090810190601f1680156104d45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6102fe600480360360808110156104fa57600080fd5b81019060208101813564010000000081111561051557600080fd5b82018360208201111561052757600080fd5b8035906020019184600183028401116401000000008311171561054957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561059c57600080fd5b8201836020820111156105ae57600080fd5b803590602001918460018302840111640100000000831117156105d057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561062357600080fd5b82018360208201111561063557600080fd5b8035906020019184600183028401116401000000008311171561065757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250611033915050565b6103a6600480360360208110156106b057600080fd5b8101906020810181356401000000008111156106cb57600080fd5b8201836020820111156106dd57600080fd5b803590602001918460018302840111640100000000831117156106ff57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611245945050505050565b6102fe6004803603602081101561075657600080fd5b81019060208101813564010000000081111561077157600080fd5b82018360208201111561078357600080fd5b803590602001918460018302840111640100000000831117156107a557600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061135b945050505050565b6102fe600480360360208110156107fc57600080fd5b81019060208101813564010000000081111561081757600080fd5b82018360208201111561082957600080fd5b8035906020019184600183028401116401000000008311171561084b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611572945050505050565b600060606005836040518082805190602001908083835b602083106108c25780518252601f1990920191602091820191016108a3565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003019092205460ff161515600114915061093e9050576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611bec833981519152604482015290519081900360640190fd5b610946611acf565b6002846040518082805190602001908083835b602083106109785780518252601f199092019160209182019101610959565b518151602093840361010090810a600019908101801990941693909216929092179092529290940196875260408051978890038201882088820182528054895260018082018054845160029382161590970290980190971604601f81018490048402850184019092528184529650878201955091939250830182828015610a405780601f10610a1557610100808354040283529160200191610a40565b820191906000526020600020905b815481529060010190602001808311610a2357829003601f168201915b50505091909252505081516020909201519194509092505050915091565b6005836040518082805190602001908083835b60208310610a905780518252601f199092019160209182019101610a71565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003019092205460ff1615156001149150610b0c9050576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611bec833981519152604482015290519081900360640190fd5b600180548101908190556040805160608101825291825260208083018590528282018490529051845160039286929182918401908083835b60208310610b635780518252601f199092019160209182019101610b44565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845181558484015180519194610bad94506001860193500190611ae7565b506040820151816002015590505060016006836040518082805190602001908083835b60208310610bef5780518252601f199092019160209182019101610bd0565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320805460ff1916941515949094179093555060088054600181018083556000929092528551919350610c74927ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee39091019190860190611ae7565b5050505050565b60006006826040518082805190602001908083835b60208310610caf5780518252601f199092019160209182019101610c90565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003019092205460ff1615156001149150610d2b9050576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611c0c833981519152604482015290519081900360640190fd5b610d33611b65565b6003836040518082805190602001908083835b60208310610d655780518252601f199092019160209182019101610d46565b518151602093840361010090810a60001990810180199094169390921692909217909252929094019687526040805197889003820188206060890182528054895260018082018054845160029382161590970290980190971604601f81018490048402850184019092528184529650878201955091939250830182828015610e2e5780601f10610e0357610100808354040283529160200191610e2e565b820191906000526020600020905b815481529060010190602001808311610e1157829003601f168201915b505050918352505060029190910154602090910152604001519392505050565b6000606060006006846040518082805190602001908083835b60208310610e865780518252601f199092019160209182019101610e67565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003019092205460ff1615156001149150610f029050576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611c0c833981519152604482015290519081900360640190fd5b610f0a611b65565b6003856040518082805190602001908083835b60208310610f3c5780518252601f199092019160209182019101610f1d565b518151602093840361010090810a60001990810180199094169390921692909217909252929094019687526040805197889003820188206060890182528054895260018082018054845160029382161590970290980190971604601f810184900484028501840190925281845296508782019550919392508301828280156110055780601f10610fda57610100808354040283529160200191611005565b820191906000526020600020905b815481529060010190602001808311610fe857829003601f168201915b5050509183525050600291909101546020918201528151908201516040909201519097919650945092505050565b6006846040518082805190602001908083835b602083106110655780518252601f199092019160209182019101611046565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003019092205460ff16151560011491506110e19050576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611c0c833981519152604482015290519081900360640190fd5b6005836040518082805190602001908083835b602083106111135780518252601f1990920191602091820191016110f4565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003019092205460ff161515600114915061118f9050576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611bec833981519152604482015290519081900360640190fd5b6040805160808101825283815260208082018490529181018590526060810186905260048054600181018083556000839052835180519195929093027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01926111fc928492910190611ae7565b5060208281015160018301556040830151805161121f9260028501920190611ae7565b506060820151805161123b916003840191602090910190611ae7565b5050505050505050565b60006005826040518082805190602001908083835b602083106112795780518252601f19909201916020918201910161125a565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003019092205460ff16151560011491506112f59050576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611bec833981519152604482015290519081900360640190fd5b6002826040518082805190602001908083835b602083106113275780518252601f199092019160209182019101611308565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054949350505050565b6005816040518082805190602001908083835b6020831061138d5780518252601f19909201916020918201910161136e565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff161591506114159050576040805160e560020a62461bcd02815260206004820152601360248201527f42616e6b20616c72656164792065786973747300000000000000000000000000604482015290519081900360640190fd5b600080546001019081905560408051808201825291825260208083018490529051835160029285929182918401908083835b602083106114665780518252601f199092019160209182019101611447565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381019093208451815584840151805191946114b094506001860193500190611ae7565b5090505060016005826040518082805190602001908083835b602083106114e85780518252601f1990920191602091820191016114c9565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320805460ff191694151594909417909355506007805460018101808355600092909252845191935061156d927fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6889091019190850190611ae7565b505050565b6005816040518082805190602001908083835b602083106115a45780518252601f199092019160209182019101611585565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003019092205460ff16151560011491506116209050576040805160e560020a62461bcd0281526020600482015260136024820152600080516020611bec833981519152604482015290519081900360640190fd5b60005b60045481101561181c5761163682611245565b6116ea60048381548110151561164857fe5b600091825260209182902060026004909202018101805460408051601f6000196101006001861615020190931694909404918201859004850284018501905280835291929091908301828280156116e05780601f106116b5576101008083540402835291602001916116e0565b820191906000526020600020905b8154815290600101906020018083116116c357829003601f168201915b5050505050611245565b1415611814576117c360048281548110151561170257fe5b90600052602060002090600402016001015460048381548110151561172357fe5b6000918252602091829020600360049092020101805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156117b95780601f1061178e576101008083540402835291602001916117b9565b820191906000526020600020905b81548152906001019060200180831161179c57829003601f168201915b5050505050611820565b60048054829081106117d157fe5b600091825260208220600490910201906117eb8282611b87565b60018201600090556002820160006118039190611b87565b611811600383016000611b87565b50505b600101611623565b5050565b6006816040518082805190602001908083835b602083106118525780518252601f199092019160209182019101611833565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003019092205460ff16151560011491506118ce9050576040805160e560020a62461bcd0281526020600482015260176024820152600080516020611c0c833981519152604482015290519081900360640190fd5b816003826040518082805190602001908083835b602083106119015780518252601f1990920191602091820191016118e2565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381018420600201805495909501909455505082517f5076734a4906642dd341ffaf6dbe348db33f8afd96ebf4a45a7c84c9dd2cd67a92600392859290918291908401908083835b6020831061198e5780518252601f19909201916020918201910161196f565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016003836040518082805190602001908083835b602083106119f65780518252601f1990920191602091820191016119d7565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600201546040518080602001838152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015611abc5780601f10611a9157610100808354040283529160200191611abc565b820191906000526020600020905b815481529060010190602001808311611a9f57829003601f168201915b5050935050505060405180910390a15050565b60408051808201909152600081526060602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b2857805160ff1916838001178555611b55565b82800160010185558215611b55579182015b82811115611b55578251825591602001919060010190611b3a565b50611b61929150611bce565b5090565b6060604051908101604052806000815260200160608152602001600081525090565b50805460018160011615610100020316600290046000825580601f10611bad5750611bcb565b601f016020900490600052602060002090810190611bcb9190611bce565b50565b611be891905b80821115611b615760008155600101611bd4565b9056fe42616e6b20646f6573206e6f7420657869737400000000000000000000000000437573746f6d657220646f6573206e6f74206578697374000000000000000000a165627a7a72305820fb85ead353815ee26592f44825298d62c2c1c7ea5334c932494e07dd1d8094d90029";

    public static final String FUNC_GETBANK = "getBank";

    public static final String FUNC_SETCUSTOMER = "setCustomer";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETCUSTOMER = "getCustomer";

    public static final String FUNC_REQUESTBALANCEUPDATE = "requestBalanceUpdate";

    public static final String FUNC_GETBANKID = "getBankId";

    public static final String FUNC_SETBANK = "setBank";

    public static final String FUNC_VERIFYSTATEMENT = "verifyStatement";

    public static final Event CUSTOMERINFO_EVENT = new Event("CustomerInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Transaction3(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Transaction3(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Transaction3(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Transaction3(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple2<BigInteger, String>> getBank(String _bankName) {
        final Function function = new Function(FUNC_GETBANK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setCustomer(String _bankName, String _customerName, BigInteger _balance) {
        final Function function = new Function(
                FUNC_SETCUSTOMER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankName), 
                new org.web3j.abi.datatypes.Utf8String(_customerName), 
                new org.web3j.abi.datatypes.generated.Uint256(_balance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBalance(String _customerName) {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_customerName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, String, BigInteger>> getCustomer(String _customerName) {
        final Function function = new Function(FUNC_GETCUSTOMER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_customerName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<BigInteger, String, BigInteger>>(
                new Callable<Tuple3<BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> requestBalanceUpdate(String _customerName, String _bankName, String _message, BigInteger _balance) {
        final Function function = new Function(
                FUNC_REQUESTBALANCEUPDATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_customerName), 
                new org.web3j.abi.datatypes.Utf8String(_bankName), 
                new org.web3j.abi.datatypes.Utf8String(_message), 
                new org.web3j.abi.datatypes.generated.Uint256(_balance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBankId(String _bankName) {
        final Function function = new Function(FUNC_GETBANKID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setBank(String _bankName) {
        final Function function = new Function(
                FUNC_SETBANK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyStatement(String _bankName) {
        final Function function = new Function(
                FUNC_VERIFYSTATEMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<CustomerInfoEventResponse> getCustomerInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CUSTOMERINFO_EVENT, transactionReceipt);
        ArrayList<CustomerInfoEventResponse> responses = new ArrayList<CustomerInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CustomerInfoEventResponse typedResponse = new CustomerInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CustomerInfoEventResponse> customerInfoEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CustomerInfoEventResponse>() {
            @Override
            public CustomerInfoEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CUSTOMERINFO_EVENT, log);
                CustomerInfoEventResponse typedResponse = new CustomerInfoEventResponse();
                typedResponse.log = log;
                typedResponse.customerName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CustomerInfoEventResponse> customerInfoEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CUSTOMERINFO_EVENT));
        return customerInfoEventFlowable(filter);
    }

    @Deprecated
    public static Transaction3 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Transaction3(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Transaction3 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Transaction3(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Transaction3 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Transaction3(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Transaction3 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Transaction3(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Transaction3> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Transaction3.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Transaction3> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Transaction3.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Transaction3> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Transaction3.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Transaction3> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Transaction3.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class CustomerInfoEventResponse {
        public Log log;

        public String customerName;

        public BigInteger balance;
    }
}
